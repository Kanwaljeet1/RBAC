from flask import Flask, request, jsonify, redirect, url_for, render_template_string
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
import bcrypt
from functools import wraps

app = Flask(__name__)

# Setup secret key for Flask and JWT
app.config['SECRET_KEY'] = 'your_secret_key'  # Use a strong secret key
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'  # Use a strong secret key for JWT

jwt = JWTManager(app)

# In-memory database (for demo purposes)
users_db = {}

# Helper function to check user roles
def role_required(role):
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            current_user = get_jwt_identity()  # Get the current user from the JWT token
            user = users_db.get(current_user)
            if user and user['role'] == role:
                return fn(*args, **kwargs)  # Proceed to the route if user has the correct role
            return jsonify({"message": "Permission denied"}), 403
        return decorator
    return wrapper

@app.route('/')
def home():
    return redirect(url_for('auth', section='register'))  # Start with registration page

# Authentication Route (for register, login, and dashboard)
@app.route('/auth/<section>', methods=['GET', 'POST'])
def auth(section):
    if section == 'register' and request.method == 'POST':
        # Registration Logic
        username = request.form['username']
        password = request.form['password']
        role = request.form.get('role', 'user')  # Default to 'user' role if not specified

        # Check if username already exists
        if username in users_db:
            return jsonify({"message": "User already exists"}), 400

        # Hash the password using bcrypt
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        # Save the user in the "database" with a role
        users_db[username] = {
            'username': username,
            'password': hashed_password,
            'role': role  # Store the role (admin, user, etc.)
        }

        return redirect(url_for('auth', section='login'))

    elif section == 'login' and request.method == 'POST':
        # Login Logic
        username = request.form['username']
        password = request.form['password']

        user = users_db.get(username)

        # Check if user exists and password is correct
        if user and bcrypt.checkpw(password.encode('utf-8'), user['password']):
            # Generate JWT token with role information
            access_token = create_access_token(identity=username, additional_claims={"role": user['role']})
            # Send a successful login message with a custom welcome message based on the role
            if user['role'] == 'admin':
                return render_template_string(admin_dashboard_template, message=f"Welcome back, Admin {username}!", access_token=access_token)
            else:
                return render_template_string(user_dashboard_template, message=f"Welcome back, {username}!", access_token=access_token)
        else:
            return jsonify({"message": "Invalid credentials"}), 401

    elif section == 'dashboard' and request.method == 'GET':
        # Get current user (from JWT token)
        current_user = get_jwt_identity()
        return render_template_string(dashboard_template, section='dashboard', username=current_user)

    # Return the appropriate section
    if section == 'register':
        return render_template_string(register_template)
    elif section == 'login':
        return render_template_string(login_template)
    return render_template_string(home_template)

# Protected Dashboard Route for Admin users only
@app.route('/admin_dashboard', methods=['GET'])
@jwt_required()
@role_required('admin')  # Only 'admin' role can access this route
def admin_dashboard():
    current_user = get_jwt_identity()
    return render_template_string(admin_dashboard_template, username=current_user)

# Protected Dashboard Route for Regular users
@app.route('/user_dashboard', methods=['GET'])
@jwt_required()
@role_required('user')  # Only users with 'user' role can access this route
def user_dashboard():
    current_user = get_jwt_identity()
    return render_template_string(user_dashboard_template, username=current_user)

# Logout Route
@app.route('/logout', methods=['GET'])
def logout():
    return redirect(url_for('auth', section='login'))  # Redirect to login page

# HTML Templates embedded as strings
home_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flask App</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">Flask Application with JWT & RBAC</h1>
        
        <div class="alert alert-info" role="alert">
            Welcome to the Flask Application! Please navigate to the appropriate section.
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""

register_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2 class="text-center">Register</h2>
        <form action="{{ url_for('auth', section='register') }}" method="POST">
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" name="username" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <div class="mb-3">
                <label for="role" class="form-label">Role</label>
                <select class="form-select" id="role" name="role">
                    <option value="user" selected>User</option>
                    <option value="admin">Admin</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""

login_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2 class="text-center">Login</h2>
        <form action="{{ url_for('auth', section='login') }}" method="POST">
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" name="username" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""

dashboard_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2 class="text-center">Welcome, {{ username }}!</h2>
        <div class="alert alert-success" role="alert">
            You are logged in. This is your dashboard.
        </div>
        <a href="{{ url_for('logout') }}" class="btn btn-danger">Logout</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""

admin_dashboard_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2 class="text-center">{{ message }}</h2>
        <div class="alert alert-warning" role="alert">
            Welcome Admin, {{ username }}! You have full access.
        </div>
        <a href="{{ url_for('logout') }}" class="btn btn-danger">Logout</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""

user_dashboard_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2 class="text-center">{{ message }}</h2>
        <div class="alert alert-success" role="alert">
            Welcome User, {{ username }}! You have limited access.
        </div>
        <a href="{{ url_for('logout') }}" class="btn btn-danger">Logout</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""

if __name__ == '__main__':
    app.run(debug=True)
